node {

    withMaven(maven:'maven-3.6.2') {

        stage('Checkout') {
            git url: 'https://github.com/banibrata07/sample-spring-microservices.git', credentialsId: 'github-banibrataaws', branch: 'master'
        }

        stage('Build') {
            sh 'mvn clean install'
            def pom = readMavenPom file:'pom.xml'
            print pom.version
            env.version = pom.version
        }
         stage('S3 transfer') {
            script {
             s3Upload consoleLogLevel: 'INFO', dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: 'aws-s3artifact-bani', excludedFile: '/discovery-service/target/', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: false, selectedRegion: 'us-east-1', showDirectlyInBrowser: false, sourceFile: '**/discovery-service/target/*.jar', storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'aws-s3artifact-bani', userMetadata: []
            }
        }
        
        
         stage('SSH transfer') {
         script {
          sshPublisher(
           continueOnError: false, failOnError: true,
           publishers: [
            sshPublisherDesc(
             configName: "docker_host_discovery",
             verbose: true,
             transfers: [
              sshTransfer(
               sourceFiles: "discovery-service/Dockerfile",
               removePrefix: "discovery-service",
               remoteDirectory: "//usr//discovery",
              ),
              sshTransfer(
               sourceFiles: "discovery-service/target/discovery-service.jar",
               removePrefix: "discovery-service/target/",
               remoteDirectory: "//usr//discovery",
              )
             ])
           ])
         }
        }
        stage('SSH remove Previous image') {
         script {
          sshPublisher(
           continueOnError: false, failOnError: true,
           publishers: [
            sshPublisherDesc(
             configName: "docker_host_discovery",
             verbose: true,
             transfers: [
              sshTransfer(
               execCommand: "docker stop discovery;docker rm -f discovery;docker image rm -f discovery;"
              )
             ])
           ])
         }
        }
        stage('build image') {
         script {
          sshPublisher(
           continueOnError: false, failOnError: true,
           publishers: [
            sshPublisherDesc(
             configName: "docker_host_discovery",
             verbose: true,
             transfers: [
              sshTransfer(
               execCommand: "cd /usr/discovery;docker build -t discovery ."
              )
             ])
           ])
         }
        }
        stage('Run image') {
         script {
          sshPublisher(
           continueOnError: false, failOnError: true,
           publishers: [
            sshPublisherDesc(
             configName: "docker_host_discovery",
             verbose: true,
             transfers: [
              sshTransfer(
               execCommand: "docker run -d --network=host --name discovery -p 8761:8761 discovery;"
              )
             ])
           ])
         }
        }
        stage ('Final') {
            build job: 'account-service-pipeline', wait: false
        }  
    }

}